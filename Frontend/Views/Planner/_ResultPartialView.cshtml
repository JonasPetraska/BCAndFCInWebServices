@using Common.Enums
@using Common.Helpers
@using System.Web
@model Common.Models.ResponseModel
<div class="card" style="padding-top: 10px;">
    @for(int i = 0; i < Model.Nodes.Count; i++)
    {
        @Html.Hidden("NodeIds[" + i + "]", Model.Nodes[i].Id);
    }

    <div class="card-header">
        Rezultatai
    </div>
    <div class="card-body">
        <h1>1 dalis - Įvestys:</h1>
        <h3>Produkcinės taisyklės: </h3>
        @foreach (var rule in Model.Rules)
        {
            <p>@rule.Number: @rule.ToStringFull()</p>
        }

        <h3>Faktai: </h3>
        <p>[@string.Join(';', Model.Facts)]</p>

        <h3>Tikslas: </h3>
        <p>@Model.Goal</p>

        <h1>2 dalis - Veiksmai:</h1>

        @if (Model.MethodType.ToLower() == "backward")
        {
            int i = 1;
            var padding = 3;
            @foreach (var element in Model.Trace)
            {
                {
                    if (element.Type == Common.Enums.TraceElementTypeEnum.NewGoal || element.Type == TraceElementTypeEnum.Fact)
                    {
                        padding+=5;
                    }
                    else if (element.Type == TraceElementTypeEnum.NewFact || element.Type == TraceElementTypeEnum.EarlierDerivedFact)
                    {
                        padding-=5;
                    }
                }

                <p>
                    @{
                        var str = string.Format("{0}.Tikslas {1}.", i, element.Goal).Insert(i++.ToString().Length + 1, StringHelpers.GenerateCharacters(padding, "&nbsp;"));
                    }
                    @HttpUtility.HtmlDecode(str)
                    @if (element.Type == Common.Enums.TraceElementTypeEnum.NewGoal)
                    {
                        @string.Format("Kviečiam {0}: {1}. Nauji tikslai [{2}].", element.Rule.Number, element.Rule.ToStringFull(), string.Join(',', element.NewGoals))
                    }
                    else if (element.Type == Common.Enums.TraceElementTypeEnum.Fact)
                    {
                        @string.Format("Faktas.")
                    }
                    else if (element.Type == Common.Enums.TraceElementTypeEnum.EarlierDerivedFact)
                    {
                        @string.Format("Ankščiau išvestas faktas.")
                    }
                    else if (element.Type == Common.Enums.TraceElementTypeEnum.NewFact)
                    {
                        @string.Format("Naujas faktas {0}. Faktai [{1}].", element.Fact, string.Join(',', element.Facts))
                    }
                </p>
            }
        }
        else if (Model.MethodType.ToLower() == "forward")
        {
            int i = 1;

            @foreach (var element in Model.FCTrace)
            {
                <p>@string.Format("{0}. iteracija Nr.{1}", i++, element.Number)</p>

                @foreach (var trace in element.Trace)
                {
                    <p>
                        @string.Format("{0}. {1}: {2}", i++, trace.Rule.ToString(), trace.Rule.ToStringFull())
                        @if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleApplicableRaiseFlag1)
                        {
                            @string.Format(" taikoma, nustatom 1-ą požymį. Faktai: [{0}].", string.Join(",", trace.Facts))
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableFlag1Raised)
                        {
                            @string.Format(" netaikoma, nes nustatytas 1-as požymis.")
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableFlag2Raised)
                        {
                            @string.Format(" netaikoma, nes nustatytas 2-as požymis.")
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableMissingFacts)
                        {
                            @string.Format(" netaikoma, nes trūksta faktų: [{0}].", string.Join(",", trace.Facts))
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableResultInFactsRaiseFlag2)
                        {
                            @string.Format(" netaikoma, nes tikslas jau yra faktuose, nustatytas 2-as požymis.")
                        }
                    </p>
                }
            }
        }

        <h1>3 dalis - Išeitis:</h1>
        <p>Rezultatas: @(Model.Result == Common.Enums.FCBCResultEnum.Success ? "Tikslas pasiektas." : "Tikslas nepasiektas.")</p>
        @if (Model.Result == Common.Enums.FCBCResultEnum.Success)
        {
            <p>Kelias: [@string.Join(';', Model.Production)]</p>
        }
    </div>
</div>