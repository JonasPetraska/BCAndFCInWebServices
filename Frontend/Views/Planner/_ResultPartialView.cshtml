@model Common.Models.ResponseModel
<div class="card" style="padding-top: 10px;">
    @for(int i = 0; i < Model.Nodes.Count; i++)
    {
        @Html.Hidden("NodeIds[" + i + "]", Model.Nodes[i].Id);
    }

    <div class="card-header">
        Results
    </div>
    <div class="card-body">
        <h1>Part 1 - Input data:</h1>
        <h3>Rules: </h3>
        @foreach (var rule in Model.Rules)
        {
            <p>@rule.Number: @rule.ToStringFull()</p>
        }
        @*@foreach (var node in Model.Nodes)
        {
            <p>@node.Name: @node.Rule.ToStringFull()</p>
        }*@

        <h1>Facts: </h1>
        <p>[@string.Join(';', Model.Facts)]</p>

        <h3>Goal: </h3>
        <p>@Model.Goal</p>

        <h1>Part 2 - Trace:</h1>

        @if (Model.MethodType.ToLower() == "backward")
        {
            int i = 1;

            @foreach (var element in Model.Trace)
            {
                <p>
                    @string.Format("{0}. Goal {1}", i++, element.Goal)
                    @if (element.Type == Common.Enums.TraceElementTypeEnum.NewGoal)
                    {
                        @string.Format(". Call {0}: {1}. New goals [{2}].", element.Rule.Number, element.Rule.ToStringFull(), string.Join(',', element.NewGoals))
                    }
                    else if (element.Type == Common.Enums.TraceElementTypeEnum.Fact)
                    {
                        @string.Format(". Fact.")
                    }
                    else if (element.Type == Common.Enums.TraceElementTypeEnum.EarlierDerivedFact)
                    {
                        @string.Format(". Earlier derived fact.")
                    }
                    else if (element.Type == Common.Enums.TraceElementTypeEnum.NewFact)
                    {
                        @string.Format(". New fact {0}. Facts [{1}].", element.Fact, string.Join(',', element.Facts))
                    }
                </p>
            }
        }
        else if (Model.MethodType.ToLower() == "forward")
        {
            int i = 1;

            @foreach (var element in Model.FCTrace)
            {
                <p>@string.Format("{0}. {1} iteration", i++, element.Number)</p>

                @foreach (var trace in element.Trace)
                {
                    <p>
                        @string.Format("{0}. {1}: {2}", i++, trace.Rule.ToString(), trace.Rule.ToStringFull())
                        @if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleApplicableRaiseFlag1)
                        {
                            @string.Format(" is applicable, raising flag 1. Facts: [{0}].", string.Join(",", trace.Facts))
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableFlag1Raised)
                        {
                            @string.Format(" is not applicable since flag 1 is raised.")
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableFlag2Raised)
                        {
                            @string.Format(" is not applicable since flag 2 is raised.")
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableMissingFacts)
                        {
                            @string.Format(" is not applicable, because of missing facts: [{0}].", string.Join(",", trace.Facts))
                        }
                        else if (trace.Type == Common.Enums.TraceElementTypeEnum.RuleNotApplicableResultInFactsRaiseFlag2)
                        {
                            @string.Format(" is bot applicable since facts contain goal, raising flag 2.")
                        }
                    </p>
                }
            }
        }

        <h1>Part 3 - Output:</h1>
        <p>Result: @(Model.Result == Common.Enums.FCBCResultEnum.Success ? "Goal reached" : "Goal was not reached")</p>
        @if (Model.Result == Common.Enums.FCBCResultEnum.Success)
        {
            <p>Path: [@string.Join(';', Model.Production)]</p>
        }
    </div>
</div>